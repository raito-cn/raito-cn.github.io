<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Jvm on raito</title>
        <link>https://raito-cn.github.io/categories/jvm/</link>
        <description>Recent content in Jvm on raito</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>raito</copyright>
        <lastBuildDate>Sat, 08 Feb 2025 09:50:45 +0800</lastBuildDate><atom:link href="https://raito-cn.github.io/categories/jvm/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Jvm-Study</title>
        <link>https://raito-cn.github.io/p/jvm-study/</link>
        <pubDate>Sat, 08 Feb 2025 09:50:45 +0800</pubDate>
        
        <guid>https://raito-cn.github.io/p/jvm-study/</guid>
        <description>&lt;img src="https://raito-cn.github.io/p/jvm-study/855e88cd3b7bd4b11f63c48eeeb24ddbb53db427.jpg" alt="Featured image of post Jvm-Study" /&gt;&lt;h2 id=&#34;基础篇&#34;&gt;基础篇
&lt;/h2&gt;&lt;h3 id=&#34;初识jvm&#34;&gt;初识JVM
&lt;/h3&gt;&lt;h4 id=&#34;介绍&#34;&gt;介绍
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;JVM本质是一个运行在计算机上的程序，它的职责是运行Java字节码文件&lt;/p&gt;
&lt;p&gt;Java程序运行的流程大体为:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Java源文件 --&amp;gt; Javac编写为字节码文件 --&amp;gt; Jvm向计算机解释运行字节码文件&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;内存管理
自动为对象，方法等分配内存，并实现了自动的&lt;strong&gt;垃圾回收&lt;/strong&gt;机制，回收不再使用的对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;即时编译
JVM提供了即时编译机制(&lt;code&gt;JIT&lt;/code&gt;)，例如对热点代码进行优化，提升执行效率。即时编译JVM通常情况下会逐条解释字节码，并且每次执行都会从字节码重新解释到机器指令。这种方式比较慢，因此对于热点代码，JVM会启用JIT编译器直接将频繁执行的字节码片段转化为机器码，并缓存起来。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;组成&#34;&gt;组成
&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;类加载器: 加载Class字节码文件中的内容到内存中&lt;/li&gt;
&lt;li&gt;运行时数据区域: 负责管理JVM使用到的内存，例如创建对象和销毁对象&lt;/li&gt;
&lt;li&gt;执行引擎: 包括即时编译器、解释器、垃圾回收期等&lt;/li&gt;
&lt;li&gt;本地接口: 调用本地已经编译的方法，比如虚拟机中提供的c/c++的方法(本质上Jvm是由C/C++实现的)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;字节码文件详解&#34;&gt;字节码文件详解
&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;字节码文件保存了源代码(Java)文件编译之后的内容，以二进制的方式存储，无法直接用记事本打开阅读，推荐使用&lt;code&gt;jclasslib&lt;/code&gt;工具查看字节码文件
&lt;img src=&#34;https://raito-cn.github.io/p/jvm-study/%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6.jpg&#34;
	width=&#34;1494&#34;
	height=&#34;568&#34;
	srcset=&#34;https://raito-cn.github.io/p/jvm-study/%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6_hu_8869577d0c0069cd.jpg 480w, https://raito-cn.github.io/p/jvm-study/%E5%AD%97%E8%8A%82%E7%A0%81%E6%96%87%E4%BB%B6_hu_3307436e81014c52.jpg 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;字节码文件&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;263&#34;
		data-flex-basis=&#34;631px&#34;
	
&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;java内存结构&#34;&gt;Java内存结构
&lt;/h3&gt;&lt;h3 id=&#34;垃圾回收&#34;&gt;垃圾回收
&lt;/h3&gt;&lt;h3 id=&#34;类的生命周期和类加载器&#34;&gt;类的生命周期和类加载器
&lt;/h3&gt;</description>
        </item>
        
    </channel>
</rss>
